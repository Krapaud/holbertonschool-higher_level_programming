Test cases for BaseGeometry class

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Test area method
>>> try:
...     bg.area()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented

# Test valid integers
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

# Test invalid types
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

>>> try:
...     bg.integer_validator("float_val", 3.14)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] float_val must be an integer

>>> try:
...     bg.integer_validator("list_val", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] list_val must be an integer

# Test invalid values
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# Test edge cases
>>> try:
...     bg.integer_validator("none_val", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] none_val must be an integer

>>> bg.integer_validator("", 5)

>>> bg.integer_validator("valid", 1)
